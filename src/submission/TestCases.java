package submission;

import static org.junit.Assert.*;



import java.io.IOException;

import org.junit.BeforeClass;
import org.junit.Test;

public class TestCases {

	static RobotPath robot;

	@BeforeClass
	public static void openBrowser() {
		robot = new RobotPath();
	}

	@Test
	public void planShortest1() throws IOException {
		robot.readInput("maze.txt");

		robot.planShortest();
		assertEquals("Maze1 planShortest test:",
				String.format(
						"%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n",
						"0", "0", "0", "*", "0", "0", "0", "0", "0", "0", "s", "w", "S", "*", "0", "0", "0", "0", "0",
						"0", "s", "*", "*", "0", "0", "0", "0", "0", "0", "0", "se", "se", "se", "se", "se", "se", "e",
						"s", "0", "0", "se", "se", "se", "se", "se", "s", "*", "s", "0", "0", "se", "se", "se", "se",
						"se", "s", "*", "s", "0", "0", "se", "se", "se", "se", "se", "s", "*", "s", "0", "0", "se",
						"se", "se", "se", "se", "s", "*", "s", "0", "0", "e", "e", "e", "e", "e", "e", "e", "D", "0",
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"),
				robot.outputJunit());
	}

	@Test
	public void quickPlan1() throws IOException {
		robot.readInput("maze.txt");

		robot.quickPlan();
		assertEquals("Maze1 planShortest test:", String.format(
				"%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
						+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
						+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
						+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
						+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n",
				"0", "0", "0", "*", "0", "0", "0", "0", "0", "0", "s", "w", "S", "*", "0", "0", "0", "0", "0", "0", "s",
				"*", "*", "0", "0", "0", "0", "0", "0", "0", "e", "e", "e", "s", "0", "0", "0", "0", "0", "0", "0", "0",
				"0", "e", "s", "0", "*", "0", "0", "0", "0", "0", "0", "0", "e", "s", "*", "0", "0", "0", "0", "0", "0",
				"0", "0", "s", "*", "0", "0", "0", "0", "0", "0", "0", "0", "s", "*", "0", "0", "0", "0", "0", "0", "0",
				"0", "e", "e", "D", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"), robot.outputJunit());

	}

	@Test
	public void planShortest2() throws IOException {
		robot.readInput("maze2.txt");

		robot.planShortest();
		assertEquals("Maze2 planShortest test:",
				String.format(
						"%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n",
						"0", "*", "0", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "*", "S", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "*", "*", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "*", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "*", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "*", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "*", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "D", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"),
				robot.outputJunit());
	}

	@Test
	public void quickPlan2() throws IOException {
		robot.readInput("maze2.txt");

		robot.quickPlan();
		assertEquals("Maze2 planShortest test:",
				String.format(
						"%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n",
						"0", "*", "0", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "*", "S", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "*", "*", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "*", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "*", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "*", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "*", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "D", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"),
				robot.outputJunit());

	}

	@Test
	public void planShortest3() throws IOException {
		robot.readInput("maze3.txt");

		robot.planShortest();
		assertEquals("Maze3 planShortest test:",
				String.format(
						"%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n",
						"0", "0", "0", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"e", "e", "D", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"n", "*", "*", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"n", "w", "w", "w", "w", "w", "w", "w", "0", "0", ////////////////////////////////////////////////
						"n", "nw", "nw", "nw", "nw", "nw", "*", "n", "0", "0", ////////////////////////////////////////////////
						"n", "nw", "nw", "nw", "nw", "nw", "*", "n", "0", "0", ////////////////////////////////////////////////
						"n", "nw", "nw", "nw", "nw", "nw", "*", "n", "0", "0", ////////////////////////////////////////////////
						"n", "nw", "nw", "nw", "nw", "nw", "*", "n", "0", "0", ////////////////////////////////////////////////
						"n", "nw", "nw", "nw", "nw", "nw", "w", "S", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"),
				robot.outputJunit());
	}

	@Test
	public void quickPlan3() throws IOException {
		robot.readInput("maze3.txt");

		robot.quickPlan();
		assertEquals("Maze3 planShortest test:",
				String.format(
						"%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n",
						"0", "0", "0", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"e", "e", "D", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"n", "*", "*", "s", "w", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"n", "w", "w", "w", "n", "w", "w", "w", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "*", "n", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "*", "n", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "*", "n", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "*", "n", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "S", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"),
				robot.outputJunit());

	}

	@Test
	public void planShortest4() throws IOException {
		robot.readInput("maze4.txt");

		robot.planShortest();
		assertEquals("Maze4 planShortest test:",
				String.format(
						"%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n",
						"s", "w", "w", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"s", "*", "S", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"s", "*", "0", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"s", "*", "*", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"e", "e", "D", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"),
				robot.outputJunit());
	}

	@Test
	public void quickPlan4() throws IOException {
		robot.readInput("maze4.txt");

		robot.quickPlan();
		assertEquals("Maze4 planShortest test:",
				String.format(
						"%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n",
						"s", "w", "w", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"s", "*", "S", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"s", "*", "0", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"s", "*", "*", "*", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"e", "e", "D", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"),
				robot.outputJunit());

	}

	@Test
	public void planShortest5() throws IOException {
		robot.readInput("maze5.txt");

		robot.planShortest();
		assertEquals("Maze5 planShortest test:", String.format("%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
				+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
				+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
				+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
				+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
				+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
				+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
				+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
				+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
				+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
				+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n", /**********************************************************************/
				"e", "e", "s", "*", "0", "0", "*", "e", "e", "se", "se", "s", "*", "0", ///////////////////////////////
				"n", "*", "s", "*", "0", "0", "*", "n", "*", "se", "se", "s", "*", "0", ///////////////////////////////
				"n", "*", "s", "*", "0", "0", "*", "n", "*", "e", "e", "s", "*", "0", ///////////////////////////////
				"n", "*", "s", "*", "0", "0", "*", "n", "*", "*", "*", "s", "*", "0", ///////////////////////////////
				"n", "*", "s", "*", "0", "0", "*", "n", "*", "s", "ws", "ws", "*", "0", ///////////////////////////////
				"n", "*", "s", "*", "0", "0", "*", "n", "*", "s", "ws", "ws", "*", "0", ///////////////////////////////
				"n", "*", "s", "*", "0", "0", "*", "n", "*", "s", "w", "w", "*", "0", ///////////////////////////////
				"n", "*", "s", "*", "0", "*", "*", "n", "*", "s", "*", "*", "*", "0", ///////////////////////////////
				"n", "*", "se", "s", "0", "0", "*", "n", "*", "s", "*", "0", "*", "0", ///////////////////////////////
				"n", "*", "se", "s", "0", "0", "*", "n", "*", "s", "*", "e", "e", "s", ///////////////////////////////
				"n", "*", "se", "s", "*", "*", "*", "n", "*", "s", "*", "n", "*", "s", ///////////////////////////////
				"n", "*", "se", "s", "*", "e", "e", "n", "*", "s", "*", "n", "*", "s", ///////////////////////////////
				"S", "*", "se", "s", "*", "ne", "ne", "n", "*", "s", "*", "n", "*", "D", ///////////////////////////////
				"0", "*", "se", "s", "*", "n", "*", "0", "*", "s", "*", "n", "*", "n", ///////////////////////////////
				"0", "*", "se", "s", "*", "n", "*", "0", "*", "s", "*", "n", "*", "n", ///////////////////////////////
				"0", "*", "se", "s", "*", "n", "*", "0", "*", "s", "*", "n", "*", "n", ///////////////////////////////
				"0", "*", "se", "s", "*", "n", "*", "0", "*", "se", "se", "ns", "*", "n", ///////////////////////////////
				"0", "*", "se", "s", "*", "n", "*", "0", "*", "se", "se", "s", "*", "n", ///////////////////////////////
				"0", "*", "se", "s", "*", "n", "*", "0", "*", "se", "se", "s", "*", "n", ///////////////////////////////
				"0", "*", "e", "e", "e", "n", "*", "0", "*", "e", "e", "e", "e", "n"), robot.outputJunit());
	}

	@Test
	public void quickPlan5() throws IOException {
		robot.readInput("maze5.txt");

		robot.quickPlan();
		try {
			assertEquals("Maze5 planShortest test:", String.format("%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
					+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
					+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
					+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
					+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
					+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
					+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
					+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
					+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
					+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
					+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n", /**************************************************************************/
					"e", "e", "s", "*", "0", "0", "*", "e", "e", "s", "0", "0", "*", "0", ////////////////////////////////////
					"n", "*", "s", "*", "0", "0", "*", "n", "*", "s", "0", "0", "*", "0", ////////////////////////////////////
					"n", "*", "s", "*", "0", "0", "*", "n", "*", "e", "e", "s", "*", "0", ////////////////////////////////////
					"n", "*", "s", "*", "0", "0", "*", "n", "*", "*", "*", "s", "*", "0", ////////////////////////////////////
					"n", "*", "s", "*", "0", "0", "*", "n", "*", "0", "0", "s", "*", "0", ////////////////////////////////////
					"n", "*", "s", "*", "0", "0", "*", "n", "*", "0", "0", "s", "*", "0", ////////////////////////////////////
					"n", "*", "s", "*", "0", "0", "*", "n", "*", "s", "w", "w", "*", "0", ////////////////////////////////////
					"n", "*", "s", "*", "0", "*", "*", "n", "*", "s", "*", "*", "*", "0", ////////////////////////////////////
					"n", "*", "e", "e", "e", "s", "*", "n", "*", "s", "*", "0", "*", "0", ////////////////////////////////////
					"n", "*", "0", "s", "w", "w", "*", "n", "*", "s", "*", "e", "e", "s", ////////////////////////////////////
					"n", "*", "0", "s", "*", "*", "*", "n", "*", "s", "*", "n", "*", "s", ////////////////////////////////////
					"n", "*", "0", "s", "*", "0", "0", "n", "*", "s", "*", "n", "*", "s", ////////////////////////////////////
					"S", "*", "0", "s", "*", "e", "e", "n", "*", "s", "*", "n", "*", "D", ////////////////////////////////////
					"0", "*", "0", "s", "*", "n", "*", "0", "*", "s", "*", "n", "*", "0", ////////////////////////////////////
					"0", "*", "0", "s", "*", "n", "*", "0", "*", "s", "*", "n", "*", "0", ////////////////////////////////////
					"0", "*", "0", "s", "*", "n", "*", "0", "*", "s", "*", "n", "*", "0", ////////////////////////////////////
					"0", "*", "0", "s", "*", "n", "*", "0", "*", "e", "e", "n", "*", "0", ////////////////////////////////////
					"0", "*", "0", "s", "*", "n", "*", "0", "*", "0", "0", "0", "*", "0", ////////////////////////////////////
					"0", "*", "0", "s", "*", "n", "*", "0", "*", "0", "0", "0", "*", "0", ////////////////////////////////////
					"0", "*", "0", "e", "e", "n", "*", "0", "*", "0", "0", "0", "0", "0"), robot.outputJunit());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Test
	public void planShortest6() throws IOException {
		robot.readInput("maze6.txt");

		robot.planShortest();
		assertEquals("Maze6 planShortest test:",
				String.format(
						"%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n",
						"0", "0", "0", "s", "w", "S", "e", "s", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "s", "*", "*", "*", "s", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "se", "se", "s", "ws", "ws", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "se", "se", "s", "ws", "ws", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "se", "se", "s", "ws", "ws", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "e", "e", "D", "w", "w", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"),
				robot.outputJunit());
	}

	@Test
	public void quickPlan6() throws IOException {
		robot.readInput("maze6.txt");

		robot.quickPlan();
		assertEquals("Maze6 planShortest test:",
				String.format(
						"%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n"
								+ "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n" + "%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n",
						"0", "0", "0", "s", "w", "S", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "s", "*", "*", "*", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "s", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "e", "s", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "e", "s", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "D", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ////////////////////////////////////////////////
						"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"),
				robot.outputJunit());

	}

	@Test
	public void planShortest7() throws IOException {
		robot.readInput("maze7.txt");

		robot.planShortest();
		assertEquals("Maze7 planShortest test:",
				String.format("%5s%5s%5s%5s\n" + "%5s%5s%5s%5s\n" + "%5s%5s%5s%5s\n", ///////////////////
						"S", "0", "*",  "D", //////////////////////////////////////////////////
						"s", "*", "e",  "n", ////////////////////////////////////////////////////
						"e", "e", "ne", "n"),
				robot.outputJunit());
	}

	@Test
	public void quickPlan7() throws IOException {
		robot.readInput("maze7.txt");

		robot.quickPlan();
		assertEquals("Maze7 planShortest test:",
				String.format("%5s%5s%5s%5s\n" + "%5s%5s%5s%5s\n" + "%5s%5s%5s%5s\n", ////////////////////
						"S", "0", "*",  "D", //////////////////////////////////////////////////
						"s", "*", "e", "n", ////////////////////////////////////////////////////
						"e", "e", "n", "0"),
				robot.outputJunit());

	}

}
